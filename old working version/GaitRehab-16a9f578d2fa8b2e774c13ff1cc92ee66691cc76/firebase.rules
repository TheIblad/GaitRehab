// Firestore rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow anyone to read and create users, only allow updates by the user or an admin
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Messages can be read, created, and deleted by participants in the conversation
    match /messages/{messageId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.senderId || 
                   request.auth.uid == resource.data.receiverId ||
                   request.auth.uid in resource.data.conversationId.split('_'));
                   
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.senderId;
                    
      allow delete: if request.auth != null && 
                    (request.auth.uid == resource.data.senderId || 
                     request.auth.uid == resource.data.receiverId ||
                     request.auth.uid in resource.data.conversationId.split('_') ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Conversations can be read and updated by participants
    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                  (request.auth.uid in resource.data.participants ||
                   conversationId.split('_').hasAll([request.auth.uid]) ||
                   conversationId.matches(request.auth.uid + '.*') || 
                   conversationId.matches('.*' + request.auth.uid));
                  
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && 
                    (request.auth.uid in resource.data.participants ||
                     conversationId.split('_').hasAll([request.auth.uid]));
                     
      allow delete: if request.auth != null &&
                    (request.auth.uid in resource.data.participants ||
                     request.auth.uid in conversationId.split('_') ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Activities can be read by the owner or their therapist
    match /activities/{activityId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.uid || 
                  get(/databases/$(database)/documents/users/$(resource.data.uid)).data.assignedTherapistId == request.auth.uid);
                  
      allow write: if request.auth != null && 
                   request.auth.uid == request.resource.data.uid;
    }
    
    // Achievements can be read by the owner or their therapist
    match /achievements/{achievementId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.uid || 
                  get(/databases/$(database)/documents/users/$(resource.data.uid)).data.assignedTherapistId == request.auth.uid);
                  
      allow write: if request.auth != null && 
                   (request.auth.uid == request.resource.data.uid || 
                    get(/databases/$(database)/documents/users/$(request.resource.data.uid)).data.assignedTherapistId == request.auth.uid);
    }
  }
} 